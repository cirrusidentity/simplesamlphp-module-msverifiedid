{% extends "base.twig" %}

{% block preload %}
    <link rel="stylesheet" type="text/css" href="{{ asset('css/styles.css', 'msverifiedid') }}" />
{% endblock %}

{% block content %}

  <div id="wrap">
    <div style="text-align: center;">
      <h1>{% trans %}Verify Credential{% endtrans %}</h1>
      <div id="qrText" style="display:none;">
        <p class="small-text">
          <img src="{{ asset('images/authenticator-icon.png', 'msverifiedid') }}" alt="Authenticator icon" class="icon-small"><br>
          {% trans %}Scan with Microsoft Authenticator{% endtrans %}
        </p>
      </div>
      <div id="qrcode" style="text-align: center";></div>
      <div id="message-wrapper" style="margin-top: 75px; margin-bottom: 75px; display:none;">
        <div id="message"></div>
      </div>
      <form method="post" id='form' action="?">
        <input type="hidden" name="ReturnTo" value="{{ return_to_url }}">
        <input type="hidden" name="StateId" value="{{ state_id }}">
        <button type="submit" name="action" value="STOP" class="button margin-top-50">{% trans %}Cancel{% endtrans %}
      </form>
    </div>
  </div>
{% endblock %}

{% block postload %}
  <script type="text/javascript" src="{{ asset('js/qrcode.min.js', 'msverifiedid') }}"></script>
  <script>
    var verifyUrl = "{{ verify_url }}";
    var statusUrl = "{{ status_url }}";
    var qrcode = new QRCode("qrcode", { width: 300, height: 300 });
    document.addEventListener("DOMContentLoaded", function() {
      if( /Android/i.test(navigator.userAgent) ) {
        console.log(`Android device! Using deep link (${verifyUrl}).`);
        window.location.href = verifyUrl;
        setTimeout(function () {
          window.location.href = "https://play.google.com/store/apps/details?id=com.azure.authenticator"; },
          2000
        );
      } else if ( /iPhone/i.test(navigator.userAgent) ) {
        console.log(`iOS device! Using deep link (${verifyUrl}).`);
        window.location.replace(verifyUrl);
      } else {
        console.log(`Not Android or iOS. Generating QR code for ${verifyUrl}`);
        qrcode.makeCode(verifyUrl);
        document.getElementById('qrText').style.display = "block";
      }
      var checkStatus = setInterval(function () {
        fetch(statusUrl)
          .then(response => response.status)
          .catch(error => document.getElementById("message").innerHTML = error)
          .then(status => {
            if (status === 202) {
              console.log("*** status check got 202")
              // QR Code scanned
              document.getElementById('message-wrapper').style.display = "block";
              document.getElementById("qrcode").getElementsByTagName("img")[0].style.opacity = "0.1";
              document.getElementById('qrText').style.display = "none";
              document.getElementById('message').innerHTML = "{% trans %}Verified ID presentation requested. Waiting for validation...{% endtrans %}";
            } else if (status === 201) {
              // Presentation verified
              document.getElementById('qrcode').style.display = "none";
              document.getElementById('message').innerHTML = "{% trans %}Presentation verified{% endtrans %}";
              clearInterval(checkStatus);
              document.getElementById("form").submit();
            }
          })
      }, 1500); //change this to higher interval if you use ngrok to prevent overloading the free tier service
    });
  </script>
{% endblock %}
